[{"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/index.js":"1","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/reportWebVitals.js":"2","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/store.js":"3","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/reducers/index.js":"4","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/reducers/errorReducer.js":"5","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/reducers/successReducer.js":"6","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/reducers/userReducer.js":"7","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/App.js":"8","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Header.js":"9","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Hero.js":"10","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/MobileNav.js":"11","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/NavBar.js":"12","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/auth/SignUp.js":"13","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/auth/Login.js":"14","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/HomePage.js":"15","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/actions/userAction.js":"16","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/actions/successWithMessage.js":"17","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Success.js":"18","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/User.js":"19","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Footer.js":"20","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/Dashboard.js":"21","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Err.js":"22"},{"size":610,"mtime":1609581413728,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1609572311596,"results":"25","hashOfConfig":"24"},{"size":383,"mtime":1609573771352,"results":"26","hashOfConfig":"24"},{"size":317,"mtime":1609580846002,"results":"27","hashOfConfig":"24"},{"size":276,"mtime":1609809255708,"results":"28","hashOfConfig":"24"},{"size":377,"mtime":1609593821759,"results":"29","hashOfConfig":"24"},{"size":694,"mtime":1609809255707,"results":"30","hashOfConfig":"24"},{"size":1815,"mtime":1609813708425,"results":"31","hashOfConfig":"24"},{"size":496,"mtime":1609582180576,"results":"32","hashOfConfig":"24"},{"size":1070,"mtime":1609592256592,"results":"33","hashOfConfig":"24"},{"size":3231,"mtime":1609811022635,"results":"34","hashOfConfig":"24"},{"size":2982,"mtime":1609811500895,"results":"35","hashOfConfig":"24"},{"size":3949,"mtime":1609688487139,"results":"36","hashOfConfig":"24"},{"size":2824,"mtime":1609809629207,"results":"37","hashOfConfig":"24"},{"size":795,"mtime":1609616035188,"results":"38","hashOfConfig":"24"},{"size":2728,"mtime":1609887990756,"results":"39","hashOfConfig":"24"},{"size":232,"mtime":1609597592799,"results":"40","hashOfConfig":"24"},{"size":1611,"mtime":1609686725229,"results":"41","hashOfConfig":"24"},{"size":468,"mtime":1609809765930,"results":"42","hashOfConfig":"24"},{"size":2142,"mtime":1609670176255,"results":"43","hashOfConfig":"24"},{"size":1437,"mtime":1609814347482,"results":"44","hashOfConfig":"24"},{"size":1540,"mtime":1609713096325,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1gu1hx7",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/index.js",[],["98","99"],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/reportWebVitals.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/store.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/reducers/index.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/reducers/errorReducer.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/reducers/successReducer.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/reducers/userReducer.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/App.js",["100"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"../App.scss\";\nimport Header from \"../components/Layouts/Header\";\nimport Login from \"./auth/Login\";\nimport SignUp from \"./auth/SignUp\";\nimport HomePage from \"./HomePage\";\nimport Footer from \"../components/Layouts/Footer\";\nimport Success from \"../components/Layouts/Success\";\nimport Dashboard from \"./Dashboard\";\nimport Err from '../components/Layouts/Err'\nimport { fetchUser } from \"../store/actions/userAction\";\n\n\nclass App extends Component {\n  componentDidMount(){\n    const { currentUser, fetchUser } = this.props;\n    const curUser = localStorage.getItem(\"currentUser\");\n    let jwtId = localStorage.getItem('jwtId')\n    jwtId = JSON.parse(jwtId)\n    currentUser && jwtId &&\n    !currentUser.id && jwtId.id && fetchUser(jwtId)\n  }\n  render() {\n    const { success, Error } = this.props;\n    return (\n      <div className=\"content\">\n        {success.message && (\n          <div className=\"success-container\">\n            <Success />\n          </div>\n        )}\n\n        {Error.message && (\n          <div className=\"success-container\">\n            <Err />\n          </div>\n        )}\n        <BrowserRouter>\n          <Route path=\"/\" component={Header} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={SignUp} />\n          <Route exact path=\"/dashboard/:id\" component={Dashboard} />\n          <Route exact path=\"/\" component={HomePage} />\n          <Footer />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  success: state.succMsg.message,\n  Error: state.error.err,\n  currentUser: state.userData.currentUser,\n});\n\nexport default connect(mapStateToProps, {fetchUser})(App);\n","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Header.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Hero.js",[],["101","102"],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/MobileNav.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/NavBar.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/auth/SignUp.js",["103"],"\nimport React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createUser } from '../../store/actions/userAction';\nimport successWithMessage from '../../store/actions/successWithMessage';\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSubmit: false,\n      userData: {\n        email: '',\n        password: '',\n        firstname: '',\n        lastname: '',\n        password_confirmation: '',\n      },\n    };\n  }\n\n  componentDidUpdate(){\n    const curUser = localStorage.getItem('currentUser');\n    const { successWithMessage, currentUser, history } = this.props\n    if (currentUser.length || curUser){\n      successWithMessage(\"You are Logged In.\")\n      history.push(`/dashboard/keli`)\n    }\n      \n\n  }\n\n  render() {\n    const handleChange = e => {\n      const { userData } = this.state;\n      const { id, value } = e.target;\n      this.setState({\n        ...this.state,\n        userData: {\n          ...userData,\n          [id]: value,\n        },\n      });\n    };\n    const {\n      createUser,\n    } = this.props;\n    const { isSubmit } = this.state;\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      const { userData } = this.state;\n      this.setState({ isSubmit: true });\n      createUser(userData)\n    };\n\n    return (\n      <div className=\"signup auth\">\n        <h1 className=\"display-6 mb-3  font-weight-bolder text-center\">\n          Sign Up\n        </h1>\n        <Form\n          className=\"user-form p-5 shadow-lg bg-white\"\n          onSubmit={handleSubmit}\n        >\n\n          <Form.Group controlId=\"firstname\">\n            <Form.Control\n              required\n              type=\"text\"\n              placeholder=\"Enter your first name\"\n              onChange={handleChange}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"lastname\">\n            <Form.Control\n              required\n              type=\"text\"\n              placeholder=\"Enter your last name\"\n              onChange={handleChange}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"email\">\n            <Form.Control\n              required\n              type=\"email\"\n              placeholder=\"Enter email\"\n              onChange={handleChange}\n            />\n            <Form.Text className=\"text-muted\">\n              We will never share your email with anyone else.\n            </Form.Text>\n          </Form.Group>\n\n          <Form.Group controlId=\"password\">\n            <Form.Control\n              required\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={handleChange}\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"password_confirmation\">\n            <Form.Control\n              required\n              type=\"password\"\n              placeholder=\"confirm you password\"\n              onChange={handleChange}\n            />\n          </Form.Group>\n\n          <Button className=\"btn hero-btn w-100\" type=\"submit\">\n            Submit\n          </Button>\n          <p className=\"text-center mt-3 font-weight-bolder auth-text\">OR</p>\n\n          <a href=\"/login\" className=\"my-3 text-center w-100 btn-link\">\n            {' '}\n            Log In\n          </a>\n        </Form>\n      </div>\n    );\n  }\n}\nSignUp.propTypes = {\n  currentUser: PropTypes.any,\n  loading: PropTypes.string,\n  errors: PropTypes.any,\n  loggedIn: PropTypes.any,\n  username: PropTypes.any,\n  success: PropTypes.any,\n  authUser: PropTypes.func.isRequired,\n  createUser: PropTypes.func.isRequired,\n  fetchUser: PropTypes.func.isRequired,\n  unLoad: PropTypes.func.isRequired,\n  history: PropTypes.any,\n};\nconst mapStateToProps = state => ({\n  success: state.succMsg.loggedIn,\n  currentUser: state.userData.currentUser,\n});\nexport default connect(mapStateToProps, {\n  createUser,\n  successWithMessage,\n})(SignUp);","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/auth/Login.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/HomePage.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/actions/userAction.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/store/actions/successWithMessage.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Success.js",["104"],"import React, { Component } from \"react\";\nimport { Alert, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport successWithMessage from \"../../store/actions/successWithMessage\";\n\nclass Success extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n    };\n  }\n\n  componentDidMount() {\n    const { show } = this.state;\n      show &&\n      setInterval(() => {\n        this.setState({\n          show: false,\n        });\n      }, 3000);\n  }\n\n  componentDidUpdate(){\n    const { show } = this.state\n    const { successWithMessage, success } = this.props;\n    show && success.type === 'create_user' &&\n    successWithMessage(\"\");\n  }\n\n  render() {\n    const setShow = () => {\n      const { successWithMessage } = this.props;\n      successWithMessage(\"\");\n      this.setState({\n        show: false,\n      });\n    };\n\n    const { show } = this.state;\n    const { success } = this.props;\n    return (\n      <div className=\"alert-success col-sm-10 col-md-6 col-ld-4 mx-auto\">\n        <Alert\n          show={show}\n          variant=\"success\"\n          dismissible\n          onClose={() => setShow()}\n        >\n          <Alert.Heading>{success.message}</Alert.Heading>\n        </Alert>\n      </div>\n    );\n  }\n}\n\nSuccess.defaultProps = {\n  success: PropTypes.any,\n};\nSuccess.propTypes = {\n  success: PropTypes.any,\n\n  successWithMessage: PropTypes.any.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  success: state.succMsg.message,\n});\n\nexport default connect(mapStateToProps, { successWithMessage })(Success);\n","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/User.js",["105"],"import React from \"react\";\n\nconst User = (props) => {\n  const { user } = props;\n  return (\n    <div className=\"user-card card\">\n      <h5 className=\"user-card-header card-title\">{user.first_name}</h5>\n      <img class=\"card-img-top\" src={user.avatar} alt=\"Card image cap\" />\n      <div className=\"card-body\">\n        <h6 className=\"card-user-name\">\n          {user.first_name + \" \" + user.last_name}\n        </h6>\n      </div>\n    </div>\n  );\n};\n\nexport default User;\n","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Footer.js",[],"/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/container/Dashboard.js",["106","107"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createError, fetchUser } from \"../store/actions/userAction\";\n\nclass Dashboard extends Component {\n  componentDidMount() {\n    const { currentUser, createError, history, fetchUser } = this.props;\n    const curUser = localStorage.getItem(\"currentUser\");\n    let jwtId = localStorage.getItem('jwtId')\n    jwtId = JSON.parse(jwtId)\n    const err = {\n      message: \"You are not logged In. Kindly login!\",\n    };\n    currentUser && jwtId ? !currentUser.id && !jwtId.id && createError(err) && history.push(\"/login\") : createError(err) && history.push(\"/login\");\n        currentUser && !currentUser.id && jwtId.id && fetchUser(jwtId)\n  }\n  render() {\n      const { currentUser } = this.props\n    return (\n      <div className=\"dashboard\">\n        <div className=\"card col col-md-8 mx-center\">\n          <h5 className=\"user-card-header card-title\">{currentUser.first_name}</h5>\n          <img class=\"card-img-top\" src={currentUser.avatar} alt=\"Card image cap\" />\n          <div className=\"card-body\">\n            <h6 className=\"card-user-name\">\n              {currentUser.first_name + \" \" + currentUser.last_name}\n            </h6>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  currentUser: state.userData.currentUser,\n});\nexport default connect(mapStateToProps, { createError, fetchUser })(Dashboard);\n","/run/media/kelib/Data/Work/Microverse/React/ikijob-test/src/components/Layouts/Err.js",["108"],"import React, { Component } from \"react\";\nimport { Alert, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { createError } from '../../store/actions/userAction'\n\nclass Err extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n    };\n  }\n\n  componentDidMount() {\n    const { show } = this.state;\n      show &&\n      setInterval(() => {\n        this.setState({\n          show: false,\n        });\n      }, 3000);\n  }\n\n  componentDidUpdate(){\n    const { show } = this.state\n    const { createError } = this.props;\n    show && Error.message &&\n    createError({});\n  }\n\n  render() {\n    const setShow = () => {\n      const { createError } = this.props;\n      createError({});\n      this.setState({\n        show: false,\n      });\n    };\n\n    const { show } = this.state;\n    const { Error } = this.props;\n    return (\n      <div className=\"alert-success col-sm-10 col-md-6 col-ld-4 mx-auto\">\n        <Alert\n          show={show}\n          variant=\"danger\"\n          dismissible\n          onClose={() => setShow()}\n        >\n          <Alert.Heading>{Error.message ? Error.message : \"Something went wrong!\"}</Alert.Heading>\n        </Alert>\n      </div>\n    );\n  }\n}\n\nErr.defaultProps = {\n  error: PropTypes.any,\n};\nErr.propTypes = {\n  error: PropTypes.any,\n\n  createError: PropTypes.any.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  Error: state.error.err,\n});\n\nexport default connect(mapStateToProps, { createError })(Err);\n",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":19,"column":11,"nodeType":"115","messageId":"116","endLine":19,"endColumn":18},{"ruleId":"109","replacedBy":"117"},{"ruleId":"111","replacedBy":"118"},{"ruleId":"113","severity":1,"message":"119","line":49,"column":13,"nodeType":"115","messageId":"116","endLine":49,"endColumn":21},{"ruleId":"113","severity":1,"message":"120","line":2,"column":17,"nodeType":"115","messageId":"116","endLine":2,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":8,"column":7,"nodeType":"123","endLine":8,"endColumn":74},{"ruleId":"113","severity":1,"message":"114","line":8,"column":11,"nodeType":"115","messageId":"116","endLine":8,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":23,"column":11,"nodeType":"123","endLine":23,"endColumn":85},{"ruleId":"113","severity":1,"message":"120","line":2,"column":17,"nodeType":"115","messageId":"116","endLine":2,"endColumn":23},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],"no-unused-vars","'curUser' is assigned a value but never used.","Identifier","unusedVar",["124"],["125"],"'isSubmit' is assigned a value but never used.","'Button' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]